import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score, confusion_matrix
import matplotlib.pyplot as plt
import seaborn as sns
from datetime import datetime

# Set random seed for reproducibility
np.random.seed(42)


# Synthetic email dataset
daimport pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score, confusion_matrix
import matplotlib.pyplot as plt
import seaborn as sns
from datetime import datetime

# Set random seed for reproducibility
np.random.seed(42)ta = {
    'email_text': [
        'win free money click here now',
        'meeting tomorrow at 10am',
        'claim your prize today urgent',
        'project update please review',
        'get rich quick limited offer',
        'team lunch this friday',
        'free trial exclusive deal',
        'submit your report by eod',
        'lottery winner claim now',
        'weekly team sync agenda'
    ],
    'label': [1, 0, 1, 0, 1, 0, 1, 0, 1, 0]  # 1 = spam, 0 = non-spam
}
df = pd.DataFrame(data)
df.to_csv('email_data.csv', index=False)
print('Dataset:')
print(df)

# Split features and labels
X = df['email_text']
y = df['label']

# Convert text to TF-IDF features
vectorizer = TfidfVectorizer(stop_words='english')
X_tfidf = vectorizer.fit_transform(X)

# Split into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X_tfidf, y, test_size=0.3, random_state=42)
print(f'Training set size: {X_train.shape[0]} samples')
print(f'Testing set size: {X_test.shape[0]} samples')


# Initialize and train the model
model = LogisticRegression(random_state=42)
model.fit(X_train, y_train)
print('Model trained successfully!')


# Make predictions
y_pred = model.predict(X_test)

# Calculate metrics
accuracy = accuracy_score(y_test, y_pred)
precision = precision_score(y_test, y_pred)
recall = recall_score(y_test, y_pred)
f1 = f1_score(y_test, y_pred)

print(f'Accuracy: {accuracy:.2f}')
print(f'Precision: {precision:.2f}')
print(f'Recall: {recall:.2f}')
print(f'F1-Score: {f1:.2f}')

# Plot confusion matrix
cm = confusion_matrix(y_test, y_pred)
plt.figure(figsize=(6, 4))
sns.heatmap(cm, annot=True, fmt='d', cmap='Blues', xticklabels=['Non-Spam', 'Spam'], yticklabels=['Non-Spam', 'Spam'])
plt.title('Confusion Matrix')
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.show()


# Test new emails
new_emails = [
    'win a free trip click now',
    'team meeting at 2pm'
]
new_emails_tfidf = vectorizer.transform(new_emails)
predictions = model.predict(new_emails_tfidf)

for email, pred in zip(new_emails, predictions):
    label = 'Spam' if pred == 1 else 'Non-Spam'
    print(f'Email: "{email}" --> Predicted: {label}')


# Save results to a text file
with open('model_results.txt', 'w') as f:
    f.write(f'Model Evaluation Results ({datetime.now().strftime("%Y-%m-%d %H:%M:%S")})\n')
    f.write(f'Accuracy: {accuracy:.2f}\n')
    f.write(f'Precision: {precision:.2f}\n')
    f.write(f'Recall: {recall:.2f}\n')
    f.write(f'F1-Score: {f1:.2f}\n')
    f.write('\nTest Predictions:\n')
    for email, pred in zip(new_emails, predictions):
        label = 'Spam' if pred == 1 else 'Non-Spam'
        f.write(f'Email: "{email}" --> Predicted: {label}\n')
print('Results saved to model_results.txt')



